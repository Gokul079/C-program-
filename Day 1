1st program array

#include<stdio.h>
int main()
{
int n,a[n],i;
scanf("%d ",&n);
for(i=0;i<n;i++)
    scanf("%d",&a[i]);
for(i=n-1;i>=0;i--)
    printf("%d ",a[i]);



    return 0;
}


2nd program

#include<stdio.h>
int main()
{

  int num;
    scanf("%d",&num);
    int arr[num],cz=0;
    for(int count=0;count<num;count++)
    {
    scanf("%d",&arr[num]);
    if(arr[num]==0) cz++;
    }
    printf("0:%d 1:%d",cz,num-cz);
    return 0;
}

3rd program

#include<stdio.h>
int main()
{
int num,key,min=0;
scanf("%d ",&num);
int arr[num];
for(int count=0;count<num;count++)
    scanf("%d",&arr[count]);
scanf("%d",&key);
for(int count=0;count<num;count++)
{
  if(arr[count]<key)
       min++;
}
printf("%d",min);
return 0;
}

4th program

#include<stdio.h>
int main()
{
int num;
scanf("%d ",&num);
int arr[num];
for(int count=0;count<num;count++)
    scanf("%d",&arr[count]);
for(int count=0;count<num;count++)
{
  for (int j = count + 1; j < num; j++) 
    {
        if(arr[count]==arr[j])
     printf("%d ",arr[count]);
    }
}
return 0;
}

5th program

#include<stdio.h>
int main(){
    int num,search,count;
    scanf("%d",&num);
    int arr[num];
    for(count=0;count<num;count++)
        scanf("%d",&arr[count]);
    scanf("%d",&search);
   for(count=0;count<num;count++)
   {
       if(search==arr[count])
       {
         printf("%d",count);
         break;
       }
        else if(count==num-1)
        printf("-1");
   }


    return 0;
}

6th program

#include <stdio.h>

int main()
{
    int noe;  
    scanf("%d", &noe);  
    int arr[noe];  
    for(int i = 0; i < noe; i++)  
        scanf("%d", &arr[i]);  
    for(int i = 0; i < noe; i++)  
    {  
        int min = arr[i];  
        for(int j = i + 1; j < noe; j++)  
        {  
            if(arr[j] < min)  
            {  
                int temp = arr[j];  
                arr[j] = arr[i];  
                arr[i] = temp;  
            }  
        }  
    }  
    for(int i = 0; i < noe; i++)  
    {  
        printf("%d ", arr[i]);  
    }  
  

    return 0;
}

7th program

#include <stdio.h>

int main()
{
     int N, index, sum=0;
    scanf("%d",&N);
    int arr[N];
    for(index=0;index<N;index++)
{       scanf("%d",&arr[index]);
        sum+=arr[index];
 }   for(index=0;index<N;index++)
    {
        sum-=arr[index];
        arr[index]=sum;
    }
 for(index=0;index<N;index++)
        printf("%d ",arr[index]);
    return 0;
}
8th program

#include<stdio.h>
int main()
{
    int N, start, end, index, temp;
    scanf("%d",&N);
    int arr[N];
    for(index=0;index<N;index++)
            scanf("%d",&arr[index]);
     start = 0;
    end = N - 1;
    while (start < end) {
        temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
        start++;
        end--;
    }
  for(index=0;index<N;index++)
    printf("%d ",arr[index]);
    return 0;
}

string

#include <stdio.h>

int main()
{
   char str[50];
   scanf("%c",str);
   printf("%s",str);

    return 0;
}

2

#include <stdio.h>

int main()
{
   char str[50];
   fgets(str,sizeof(str),stdin);
   puts(str);

    return 0;
}


3

#include <stdio.h>
#include<string.h>

int main()
{
   char str[50];
   fgets(str,sizeof(str),stdin);
   puts(str);
   printf("%d",(strlen(str))-1);

    return 0;
}


4

#include <stdio.h>
#include<string.h>

int main()
{
   char str[50];
   int index=0;
   fgets(str,sizeof(str),stdin);
   puts(str);
   while(str[index]!='\0')
   index++;
   printf("%d",index-1);

    return 0;
}

5

#include <stdio.h>
#include<string.h>

int main()
{
   char str[50];
   fgets(str,sizeof(str),stdin);
   puts(str);
   int index;
   for(index=0;str[index]!='\0';index++);
   printf("%d",index);

    return 0;
}

6

#include <stdio.h>
#include<string.h>

int main()
{
   char str[50];
   fgets(str,sizeof(str),stdin);
   puts(str);
   int index=0,alpha=0,dig=0,special=0;
   while(str[index]!='\0')
   {
       if((str[index]>='a' && str[index]<='z') ||  (str[index]>='a' && str[index]<='z'))
       alpha++;
       else if(str[index]>='0' && str[index]<='9')
       dig++;
       else
       special++;
       index++;
   }
   printf("%d alpha \n %d digit \n %d special \n",alpha,dig,special-1);

    return 0;
}


vowels & consonants

#include <stdio.h>
#include<string.h>

int main()
{
   char str[50];
   fgets(str,sizeof(str),stdin);
   puts(str);
   int index=0,vowel=0,consonant=0;
   while(str[index]!='\0')
   {
       if((str[index]>='a' && str[index]<='z') ||  (str[index]>='a' && str[index]<='z'))
       {
           if(str[index]=='a'|| str[index]=='e'||str[index]=='i'||str[index]=='o'||str[index]=='u'|| str[index]=='A'|| str[index]=='E'||str[index]=='I'||str[index]=='O'||str[index]=='U')
           vowel++;
           else
           consonant++;
       }
       
      index++;
   }
   printf("%d vowel \n %d consonant \n",vowel,consonant);

    return 0;
}

str upper

#include <stdio.h>
#include<string.h>

int main()
{
   char str[50];
   fgets(str,sizeof(str),stdin);
  int index=0;
   while(str[index]!='\0')
   {
       if(str[index]>='a' && str[index]<='z')
       str[index]-=32;
       index++;
   }
   printf("%s",str);

    return 0;
}

str lower

#include <stdio.h>
#include<string.h>

int main()
{
   char str[50];
   fgets(str,sizeof(str),stdin);
  int index=0;
   while(str[index]!='\0')
   {
       if(str[index]>='A' && str[index]<='Z')
       str[index]+=32;
       index++;
   }
   printf("%s",str);

    return 0;
}

str toggle

#include <stdio.h>
#include<string.h>

int main()
{
   char str[50];
   fgets(str,sizeof(str),stdin);
  int index=0;
   while(str[index]!='\0')
   {
       if(str[index]>='a' && str[index]<='z')
       str[index]-=32;
       else if(str[index]>='A' && str[index]<='Z')
       str[index]+=32;
       index++;
   }

no of words


#include <stdio.h>
#include<string.h>

int main()
{
   char str[50];
   fgets(str,sizeof(str),stdin);
  int index=0,countofwords=0;
   while(str[index]!='\0')
   {
       if(str[index]==' ' ||  str[index]=='\t' || str[index]=='\n')
           countofwords++;
           index++;
   }
   printf("%d",countofwords);

    return 0;
}
   printf("%s",str);

    return 0;
}

string occurance

#include <stdio.h>

int main()
{
    char str[]="rvsctv";
    char alphabet[123]={0};
    int index=0;
    while(str[index]!='\0')
    {
        alphabet[str[index]]++;
        index++;
    }
    for(index=0;index<123;index++)
    {
        if(alphabet[index]!=0)
        printf("\n%c - times %d",index,alphabet[index]);
    }

    return 0;
}


repearing characters

#include <stdio.h>

int main()
{
     char str[50];
    fgets(str,sizeof(str),stdin);
    char alphabet[123]={0};
    int index=0;
    while(str[index]!='\0')
    {
        alphabet[str[index]]++;
        index++;
    }
    for(index=0;index<123;index++)
    {
        if(alphabet[index]>1)
        printf("\n%c - times %d",index,alphabet[index]);
    }

    return 0;
}

sort the characters without repetition

#include <stdio.h>

int main()
{
     char str[50];
     fgets(str,sizeof(str),stdin);
    char alphabet[123]={0};
    int index=0;
    while(str[index]!='\0')
    {
        alphabet[str[index]]++;
        index++;
    }
    for(index=0;index<123;index++)
    {
        if(alphabet[index]!=0)
        printf("%c",index);
    }

    return 0;
}

character check

#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int main() {

    char str[20];
     fgets(str,sizeof(str),stdin);
          int i=0;
          if(str[i]>='A'  && str[i]<='Z')
          {
              printf("%c is uppercase letter",str[i]);
          }
          else
          {
              printf("%c is lowercase letter",str[i]);
          }
    return 0;
}

occurance of character in a string

import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        Scanner s=new Scanner(System.in);
        char l=s.next().charAt(0);
        String str=s.nextLine();
        int len=str.length();
        int count=0;
        char[] ch=str.toCharArray();
        for(int index=0;index<len;index++)
        {
                if(l==ch[index])
                {
                    count++;
                }
        }
        System.out.println(count);
    }



ROUND 1 : Aptitude, Logical Reasoning and Technical questions(MCQ’s) – 90 mins
(3 Sections - Each Section 30 mins)
Questions from:
1. Aptitude: Time and Work, Profit Loss, Train, Race and Game (10 Qns)
2. Logical Reasoning: Find Odd one out in Figures, Find Next Figure (10 Qns)
3. Technical: Basic C Sharp Qns(Conditional Statement, Loop Based Output Qns) and C++ OOPS Qns
and HashMap related one qn. (10 Qns)
ROUND 2 :

Coding Round – I (60 mins)
Given a positive number(N), print whether it is valid or not based on Conditions with ‘a’ value.
G = N - (a)^ 2,where a € ( 1 to sqrt(N) )
K^k = G , where k is positive number
Input: 13
Output: Valid – 3
Explanation:
If a=1, G = 13 – (1)^2 = 12
1^1 = 1 != 12
2^2 = 4 != 12
3^3 = 27 != 12 so K
k goes beyond G, we need to terminate.
If a=2, G = 13 – (2)^2 = 9
1^1 = 1 != 9
2^2 = 4 != 9
3^3 = 27 != 9 so K
k goes beyond G, we need to terminate.
If a=3, G = 13 – (3)^2 = 4
1^1 = 1 != 4
2^2 = 4 == 4
Input: 60
Output: Invalid

++++++++++++++++++Solution+++++++++++++++++

#include <stdio.h>
#include <math.h>
#include <stdbool.h>

// Function to check if k^k equals G
bool isKthPowerEqualToG(int G) {
    int k = 1;
    while (true) {
        int power = 1;
        for (int i = 0; i < k; i++) {
            power *= k;
            if (power > G) return false; // If k^k exceeds G, no need to continue
        }
        if (power == G) return true;
        k++;
    }
    return false;
}

// Function to determine if N is valid
bool isValidNumber(int N) {
    int sqrtN = (int)sqrt(N);
    for (int a = 1; a <= sqrtN; a++) {
        int G = N - a * a;
        if (isKthPowerEqualToG(G)) {
            printf("Valid - %d\n", a);
            return true;
        }
    }
    printf("Invalid\n");
    return false;
}

int main() {
    int N;
    scanf("%d", &N);
    printf("Input: %d\nOutput: ", N);
    isValidNumber(N);

    return 0;
}

You’re given intervals with values, and the output should be Merged and the value should be added until
the user gives “No” as input. And the output should be displayed for every time, I enter the input values
Inputs:
Do you want to enter values? : Yes
Start: 1
End: 10
Value: 3
1 10 3
Do you want to enter values? : Yes
Start: 20
End: 30
Value: 9
1 10 3
20 30 9
Do you want to enter values? : Yes
Start: 25
End: 35
Value: 8
1 10 3
20 35 17
Do you want to enter values? : Yes
Start: 5
End: 30
Value: 10
1 35 30
Do you want to enter values? : No



+++++SOlution++++
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Function to sort intervals based on their start time
void sortIntervals(int intervals[][3], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (intervals[j][0] > intervals[j + 1][0]) {
                // Swap the intervals
                int tempStart = intervals[j][0];
                int tempEnd = intervals[j][1];
                int tempValue = intervals[j][2];
                intervals[j][0] = intervals[j + 1][0];
                intervals[j][1] = intervals[j + 1][1];
                intervals[j][2] = intervals[j + 1][2];
                intervals[j + 1][0] = tempStart;
                intervals[j + 1][1] = tempEnd;
                intervals[j + 1][2] = tempValue;
            }
        }
    }
}

// Function to merge intervals
void mergeIntervals(int intervals[][3], int intervalsSize, int merged[][3], int* returnSize) {
    if (intervalsSize == 0) {
        *returnSize = 0;
        return;
    }

    // Sort the intervals based on their start times
    sortIntervals(intervals, intervalsSize);

    // Initialize the merged array
    int mergedIndex = 0;
    merged[0][0] = intervals[0][0];
    merged[0][1] = intervals[0][1];
    merged[0][2] = intervals[0][2];

    for (int i = 1; i < intervalsSize; i++) {
        // If the current interval overlaps with the previous one, merge them
        if (intervals[i][0] <= merged[mergedIndex][1]) {
            if (intervals[i][1] > merged[mergedIndex][1]) {
                merged[mergedIndex][1] = intervals[i][1];
            }
            merged[mergedIndex][2] += intervals[i][2];
        } else {
            // Otherwise, add the current interval to the merged array
            mergedIndex++;
            merged[mergedIndex][0] = intervals[i][0];
            merged[mergedIndex][1] = intervals[i][1];
            merged[mergedIndex][2] = intervals[i][2];
        }
    }

    *returnSize = mergedIndex + 1;
}

int main() {
    // Array to hold intervals
    int intervals[100][3];
    int intervalsSize = 0;

    while (1) {
        char response[4];
        printf("Do you want to enter Value? (yes/no): ");
        scanf("%s", response);

        if (strcmp(response, "no") == 0) {
            break;
        }

        printf("Start: ");
        scanf("%d", &intervals[intervalsSize][0]);
        printf("End: ");
        scanf("%d", &intervals[intervalsSize][1]);
        printf("Value: ");
        scanf("%d", &intervals[intervalsSize][2]);
        intervalsSize++;


        int merged[10][3];
        int returnSize;
        mergeIntervals(intervals, intervalsSize, merged, &returnSize);

            for (int i = 0; i < returnSize; i++) {
            printf("%d %d %d\n", merged[i][0], merged[i][1], merged[i][2]);
        }
    }

    return 0;
}

